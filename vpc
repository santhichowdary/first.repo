import boto3
import argparse
import time
import os
from botocore.exceptions import ClientError

AWS_REGION = os.getenv('AWS_REGION', None)

if not AWS_REGION:
    session = boto3.Session()
    AWS_REGION = session.region_name

def describe_vpc_endpoints():
    ec2_client = boto3.client('ec2', region_name=AWS_REGION)
    response = ec2_client.describe_vpc_endpoints()
    return response['VpcEndpoints']

def check_route_tables(vpc_endpoint_id):
    ec2_client = boto3.client('ec2', region_name=AWS_REGION)
    response = ec2_client.describe_route_tables(
        Filters=[{'Name': 'route.vpc-endpoint-id', 'Values': [vpc_endpoint_id]}]
    )
    return response['RouteTables']

def delete_vpc_endpoint(vpc_endpoint_id):
    ec2_client = boto3.client('ec2', region_name=AWS_REGION)
    try:
        ec2_client.delete_vpc_endpoints(VpcEndpointIds=[vpc_endpoint_id])
        print(f"Deleted VPC Endpoint: {vpc_endpoint_id}")
    except ClientError as e:
        print(f"Error deleting VPC Endpoint {vpc_endpoint_id}: {e}")

def wait_for_vpc_endpoint_deletion(vpc_endpoint_id):
    ec2_client = boto3.client('ec2', region_name=AWS_REGION)
    print(f"Waiting for VPC Endpoint {vpc_endpoint_id} to be deleted...")
    while True:
        try:
            response = ec2_client.describe_vpc_endpoints(
                Filters=[{'Name': 'vpc-endpoint-id', 'Values': [vpc_endpoint_id]}]
            )
            if not response['VpcEndpoints'] or response['VpcEndpoints'][0]['State'] == 'deleted':
                print(f"VPC Endpoint {vpc_endpoint_id} is fully deleted.")
                break
        except ClientError as e:
            print(f"Error checking VPC Endpoint status: {e}")
            break
        time.sleep(10)

def get_vpc_endpoint_details_from_file(filename):
    try:
        with open(filename, 'r') as file:
            vpc_endpoint_ids = [line.strip() for line in file.readlines()]
    except FileNotFoundError:
        print(f"Error: The file '{filename}' was not found.")
        return None
    
    if not vpc_endpoint_ids:
        print("Error: The input file is empty.")
        return None
    
    all_vpc_endpoints = describe_vpc_endpoints()
    found_vpc_endpoints = []
    unmatched_endpoints = []

    for vpc_endpoint_id in vpc_endpoint_ids:
        found = False
        for vpc_endpoint in all_vpc_endpoints:
            if vpc_endpoint_id == vpc_endpoint['VpcEndpointId']:
                state = vpc_endpoint['State']
                route_tables = check_route_tables(vpc_endpoint_id)
                route_info = ', '.join([rt['RouteTableId'] for rt in route_tables]) if route_tables else "No associated Route Tables"
                
                print(f"VPC Endpoint: {vpc_endpoint_id} | State: {state} | Routes: {route_info}")
                
                # If no route tables associated and endpoint is not in 'deleted' state, consider it for deletion
                if not route_tables and state != 'deleted':
                    found_vpc_endpoints.append(vpc_endpoint_id)
                found = True
                break
        
        if not found:
            unmatched_endpoints.append(vpc_endpoint_id)

    if unmatched_endpoints:
        print("\nINVALID VPC ENDPOINT IDS FROM FILE")
        for endpoint_id in unmatched_endpoints:
            print(f"Invalid VPC Endpoint ID: {endpoint_id}")
    
    return found_vpc_endpoints

def main():
    parser = argparse.ArgumentParser(description="Manage AWS VPC Endpoints")
    parser.add_argument('-i', '--input', required=True, help="Specify a filename containing VPC Endpoint IDs")
    parser.add_argument('-a', '--action', choices=['DELETE'], help="Specify DELETE to remove VPC Endpoints")
    args = parser.parse_args()

    param = args.input.lower()
    action = args.action
    
    if not param or not action:
        return

    # Get the VPC endpoint details from the file
    deletable_endpoints = get_vpc_endpoint_details_from_file(param)
    if not deletable_endpoints:
        return

    # Delete the VPC Endpoints if they are valid and eligible for deletion
    if action == "DELETE":
        for vpc_endpoint_id in deletable_endpoints:
            delete_vpc_endpoint(vpc_endpoint_id)
            wait_for_vpc_endpoint_deletion(vpc_endpoint_id)

if __name__ == "__main__":
    main()
